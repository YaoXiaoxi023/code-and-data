import numpy as np
import matplotlib.pyplot as plt
from qutip import *
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.colors import Normalize
from matplotlib.cm import ScalarMappable


# 参数设置
N = 30      
s1 = 0
s2 = 0.5
s3 = 1.0
g = 0.01
c = 0.001

psi_1 = (coherent(N, s1) - 1j*s1*g/2*(1+1/c)*create(N)*coherent(N, -s1)).unit()
psi_2 = (coherent(N, s2) - 1j*s2*g/2*(1+1/c)*create(N)*coherent(N, -s2)).unit()
psi_3 = (coherent(N, s3) - 1j*s3*g/2*(1+1/c)*create(N)*coherent(N, -s3)).unit()
# 坐标网格
xvec = np.linspace(-4, 4, 100)
pvec = np.linspace(-4, 4, 100)
X, P = np.meshgrid(xvec, pvec)

# 颜色规范化和投影参数
norm = Normalize(vmin=-0.4, vmax=0.3)
delta = 0.05

# 计算各态的Wigner函数
W1 = wigner(psi_1, xvec, pvec)
W2 = wigner(psi_2, xvec, pvec)
W3 = wigner(psi_3, xvec, pvec)
Wigner_list = [W1, W2, W3]

# 创建图形和子图
fig = plt.figure(figsize=(18, 6))
axs = [fig.add_subplot(1, 3, i+1, projection='3d') for i in range(3)]

# 绘制每个子图
for idx, (ax, W) in enumerate(zip(axs, Wigner_list)):
    z_min = np.min(W)
    z_proj = z_min - delta

    ax.contourf(X, P, W, zdir='z', offset=z_proj, 
                cmap='seismic', levels=100, norm=norm)
    
    ax.plot_surface(X, P, W, cmap='seismic', 
                    rstride=1, cstride=1, alpha=0.8, norm=norm)
    
    ax.set_zlim(z_proj, np.max(W))
    ax.view_init(elev=15, azim=110)
    ax.set_axis_off()
    
    # 子图标签在正下方
    ax.text2D(0.5, -0.12, f'({chr(97+idx)})',
              transform=ax.transAxes, fontsize=20,
              ha='center', va='top')

# 添加 colorbar
cax = fig.add_axes([0.25, 0.88, 0.5, 0.015])  # colorbar 在图顶部
sm = ScalarMappable(norm=norm, cmap='seismic')
sm.set_array([])
cbar = fig.colorbar(sm, cax=cax, orientation='horizontal')
cbar.set_label('Wigner function value', fontsize=16, labelpad=5)


# 标签在上方，刻度在下方
cbar.ax.xaxis.set_label_position('top')
cbar.set_ticks(np.linspace(-0.4, 0.3, 8))
cbar.ax.tick_params(labelsize=16)
plt.tight_layout()

plt.show()