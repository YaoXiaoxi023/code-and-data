import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize_scalar
from matplotlib import rcParams

# ========== 样式与字体配置 ==========
plt.style.use('seaborn-v0_8-muted')
rcParams.update({
    'font.family': 'serif',
    'font.serif': ['Times New Roman'],
    'mathtext.fontset': 'cm',
    'font.size': 18,
    'axes.titlesize': 20,
    'axes.labelsize': 20,
    'legend.fontsize': 16,
    'text.usetex': False
})

# ========== Fidelity 函数 ==========
def fidelity(alpha, a, r):
    sinh_r = np.sinh(r)
    cosh_r = np.cosh(r)
    lambda1 = 1 - 1j * k * sinh_r**2
    lambda2 = 1j * np.sqrt(2) * k * sinh_r * cosh_r
    kappa = lambda2 / lambda1 if lambda1 != 0 else np.nan
    
    g = np.exp(-(r - a))
    if np.isclose(1 + g**2, 0).any():
        return np.nan

    Nu = (2 + 2 * np.exp(-2 * alpha**2))**(-0.5)
    chi = (1 + np.abs(kappa)**2)**(-0.5)

    term1 = (4 * g * np.exp(-2 * alpha**2 / (1 + g**2))) / (1 + g**2)
    term2 = (np.abs(Nu * chi)**2 * 
             np.abs(np.sqrt(2) + np.conj(kappa) * 
                   (1 - g**4 + 4 * g**2 * alpha**2) / (1 + g**2)**2)**2)

    return term1 * term2

def find_optimal_a(alpha, r, bounds=(-3.0, 0.5)):
    result = minimize_scalar(lambda a: -fidelity(alpha, a, r),
                              bounds=bounds, method='bounded')
    return result.x if result.success else np.nan

# ========== 参数设置 ==========
k = 5.005
r_values = [-0.7, -2.0]
alpha_values = np.linspace(0, 3, 200)

# ========== 创建图形 ==========
fig = plt.figure(figsize=(12, 10))
gs = fig.add_gridspec(2, 2, hspace=0.3, wspace=0.25)

# (a) r=-0.7 的相似度曲线
ax1 = fig.add_subplot(gs[0, 0])
fidelity_opt = [fidelity(alpha, find_optimal_a(alpha, -0.7), -0.7) for alpha in alpha_values]
fidelity_r0 = [fidelity(alpha, 0.0, -0.7) for alpha in alpha_values]
ax1.plot(alpha_values, fidelity_opt, label='Optimal $F_2$', color='tab:blue', linewidth=2)
ax1.plot(alpha_values, fidelity_r0, label='$r\' = 0$', color='tab:green', linestyle='--', linewidth=2)
ax1.set_xlim(0, 3)
ax1.set_ylim(0, 1.05)
ax1.set_xticks([0, 1, 2, 3])
ax1.set_yticks([0, 0.5, 1.0])
ax1.set_yticklabels(['', '0.5', '1.0'])
ax1.grid(True, linestyle=':', alpha=0.7)
ax1.text(0.05, 0.95, '(a)', transform=ax1.transAxes, fontsize=20, va='top')
ax1.set_ylabel(r'$F_2$', fontsize=20)  # ✅ y轴标签
ax1.legend(loc='lower right', frameon=True)

# (b) r=-2.0 的相似度曲线
ax2 = fig.add_subplot(gs[0, 1])
fidelity_opt = [fidelity(alpha, find_optimal_a(alpha, -2.0), -2.0) for alpha in alpha_values]
fidelity_r0 = [fidelity(alpha, 0.0, -2.0) for alpha in alpha_values]
ax2.plot(alpha_values, fidelity_opt, color='tab:blue', linewidth=2)
ax2.plot(alpha_values, fidelity_r0, color='tab:green', linestyle='--', linewidth=2)
ax2.set_xlim(0, 3)
ax2.set_ylim(0, 1.05)
ax2.set_xticks([0, 1, 2, 3])
ax2.set_yticks([0, 0.5, 1.0])
ax2.set_yticklabels(['', '0.5', '1.0'])
ax2.grid(True, linestyle=':', alpha=0.7)
ax2.text(0.05, 0.95, '(b)', transform=ax2.transAxes, fontsize=20, va='top')
ax2.set_ylabel(r'$F_2$', fontsize=20)  # ✅ y轴标签
# ❌ 不加 y轴标签

# (c) r=-0.7 的 r_prime 曲线
ax3 = fig.add_subplot(gs[1, 0])
r_prime_opt = [find_optimal_a(alpha, -0.7) for alpha in alpha_values]
r_prime_r0 = np.zeros_like(alpha_values)
ax3.plot(alpha_values, r_prime_opt, label='Optimal $r\'$', color='tab:orange', linewidth=2)
ax3.plot(alpha_values, r_prime_r0, label='$r\' = 0$', color='tab:green', linestyle='--', linewidth=2)
ax3.set_xlim(0, 3)
ax3.set_ylim(-3.0, 0.5)
ax3.set_xticks([0, 1, 2, 3])
ax3.set_yticks([-3, -2, -1, 0])
ax3.grid(True, linestyle=':', alpha=0.7)
ax3.text(0.05, 0.95, '(c)', transform=ax3.transAxes, fontsize=20, va='top')
ax3.set_xlabel(r'$\alpha$', fontsize=20)
ax3.set_ylabel(r'$r^\prime$', fontsize=20)  # ✅ y轴标签
ax3.legend(loc='lower right', frameon=True)

# (d) r=-2.0 的 r_prime 曲线
ax4 = fig.add_subplot(gs[1, 1])
r_prime_opt = [find_optimal_a(alpha, -2.0) for alpha in alpha_values]
r_prime_r0 = np.zeros_like(alpha_values)
ax4.plot(alpha_values, r_prime_opt, color='tab:orange', linewidth=2)
ax4.plot(alpha_values, r_prime_r0, color='tab:green', linestyle='--', linewidth=2)
ax4.set_xlim(0, 3)
ax4.set_ylim(-3.0, 0.5)
ax4.set_xticks([0, 1, 2, 3])
ax4.set_yticks([-3, -2, -1, 0])
ax4.grid(True, linestyle=':', alpha=0.7)
ax4.text(0.05, 0.95, '(d)', transform=ax4.transAxes, fontsize=20, va='top')
ax4.set_xlabel(r'$\alpha$', fontsize=20)
ax4.set_ylabel(r'$r^\prime$', fontsize=20)  # ✅ y轴标签
# ❌ 不加 y轴标签

# 调整布局
plt.tight_layout()
plt.subplots_adjust(left=0.1, right=0.95, bottom=0.1, top=0.95)

plt.show()