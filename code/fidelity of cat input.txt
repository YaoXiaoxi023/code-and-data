import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import differential_evolution, brentq
from matplotlib import rcParams
from mpl_toolkits.axes_grid1.inset_locator import inset_axes

# ========== 样式与字体配置 ==========
plt.style.use('seaborn-v0_8-muted')
rcParams.update({
    'font.family': 'serif',
    'font.serif': ['Times New Roman'],
    'mathtext.fontset': 'cm',
    'font.size': 18,
    'axes.titlesize': 20,
    'axes.labelsize': 20,
    'legend.fontsize': 16,
    'text.usetex': True
})

# ========== 公共参数 ==========
c = 0.001
g = 0.01
k = g * (1 + 1 / c)

# ========== F+ 部分 ==========
def n1_plus(alpha_prime):
    return 1 / np.sqrt(2 * (1 + np.exp(-2 * alpha_prime**2)))

def n_plus(alpha):
    exp_term = np.exp(-2 * alpha**2)
    return 1 / np.sqrt(2 * ((k**2 * alpha**4 + 1) * (1 + exp_term) + k**2 * alpha**2 * (1 - exp_term)))

def F_plus(alpha, alpha_prime):
    term1 = 2 * (1 - 1j * k * alpha_prime * alpha) * np.exp(-0.5 * (alpha_prime - alpha)**2)
    term2 = 2 * (1 + 1j * k * alpha_prime * alpha) * np.exp(-0.5 * (alpha_prime + alpha)**2)
    return np.abs(n_plus(alpha) * n1_plus(alpha_prime) * (term1 + term2))**2

def optimal_alpha_prime_plus(alpha):
    result = differential_evolution(lambda ap: -F_plus(alpha, ap[0]), bounds=[(0, 10)], polish=True)
    return result.x[0] if result.success else np.nan

# ========== F- 部分 ==========
def n1_minus(alpha_prime):
    return 1 / np.sqrt(2 * (1 - np.exp(-2 * alpha_prime**2)))

def n_minus(alpha):
    exp_term = np.exp(-2 * alpha**2)
    return 1 / np.sqrt(2 * ((k**2 * alpha**4 + 1) * (1 - exp_term) + k**2 * alpha**2 * (1 + exp_term)))

def F_minus(alpha, alpha_prime):
    term1 = 2 * (1 - 1j * k * alpha_prime * alpha) * np.exp(-0.5 * (alpha_prime - alpha)**2)
    term2 = 2 * (1 + 1j * k * alpha_prime * alpha) * np.exp(-0.5 * (alpha_prime + alpha)**2)
    return np.abs(n_minus(alpha) * n1_minus(alpha_prime) * (term1 - term2))**2

def optimal_alpha_prime_minus(alpha):
    result = differential_evolution(lambda ap: -F_minus(alpha, ap[0]), bounds=[(0, 9)], polish=True)
    return result.x[0] if result.success else np.nan


# ========== 主计算 ==========
alpha_vals_plus = np.linspace(0.01, 9.0, 200)
alpha_vals_minus = np.linspace(0.1, 5.0, 100)

F_plus_vals = []
eta_plus_vals = []
F_minus_vals = []
eta_minus_vals = []

for a in alpha_vals_plus:
    ap_opt = optimal_alpha_prime_plus(a)
    F_plus_vals.append(F_plus(a, ap_opt))
    eta_plus_vals.append(ap_opt / a)

for a in alpha_vals_minus:
    ap_opt = optimal_alpha_prime_minus(a)
    F_minus_vals.append(F_minus(a, ap_opt))
    eta_minus_vals.append(ap_opt / a)


# ========== 找 F_- = 0.99 的 α ==========
def G(alpha):
    alpha_prime_opt = optimal_alpha_prime_minus(alpha)
    return F_minus(alpha, alpha_prime_opt) - 0.99

alpha_crit = brentq(G, 1.5, 5.0)
print(f'F_- = 0.99 时的 alpha ≈ {alpha_crit:.6f}')


# ========== 作图 ==========
fig, axes = plt.subplots(2, 2, figsize=(12, 10))
fig.subplots_adjust(wspace=0.3, hspace=0.35)

# ---- (a) F- ----
ax = axes[0, 0]
ax.plot(alpha_vals_minus, F_minus_vals, color='tab:blue', linewidth=2, label='Optimal $F_-$')
ax.axhline(0.99, color='green', linestyle='--', linewidth=1.5, label=r'$F_-=0.99$')
ax.set_xlim(0, 5)
ax.set_ylim(0.96, 1.01)
ax.grid(True, linestyle=':', alpha=0.7)
ax.text(0.05, 0.96, '(a)', transform=ax.transAxes, fontsize=20, va='top')
ax.set_xlabel(r'$\alpha$')
ax.set_ylabel(r'$F_-$')
ax.legend(loc='upper right', frameon=True)
ax.legend(
    loc='upper right',
    frameon=True,
    fontsize=13,          # 缩小字体
    framealpha=0.9,       # 半透明背景
    handlelength=1.2,     # 缩短图例线条长度
    labelspacing=0.3      # 缩小文字行距
)

# ---- (b) η- ----
ax = axes[0, 1]
ax.plot(alpha_vals_minus, eta_minus_vals, color='tab:orange', linewidth=2, label=r"$\eta_- = \alpha'_{\rm opt}/\alpha$")
ax.set_xlim(0, 5)
ax.set_ylim(1.0, 2.0)
ax.grid(True, linestyle=':', alpha=0.7)
ax.text(0.05, 0.96, '(b)', transform=ax.transAxes, fontsize=20, va='top')
ax.set_xlabel(r'$\alpha$')
ax.set_ylabel(r'$\eta_-$')
ax.legend(loc='upper right', frameon=True)
ax.legend(
    loc='upper right',
    frameon=True,
    fontsize=13,          # 缩小字体
    framealpha=0.9,       # 半透明背景
    handlelength=1.2,     # 缩短图例线条长度
    labelspacing=0.3      # 缩小文字行距
)


# ---- (c) F+ ----
ax = axes[1, 0]
ax.plot(alpha_vals_plus, F_plus_vals, color='tab:blue', linewidth=2, label='Optimal $F_+$')
ax.set_xlim(0, 5)
ax.set_ylim(0.4, 1.12)
ax.grid(True, linestyle=':', alpha=0.7)
ax.text(0.05, 0.96, '(c)', transform=ax.transAxes, fontsize=20, va='top')
ax.set_xlabel(r'$\alpha$')
ax.set_ylabel(r'$F_+$')
ax.legend(loc='upper right', frameon=True)
ax.legend(
    loc='upper right',
    frameon=True,
    fontsize=13,          # 缩小字体
    framealpha=0.9,       # 半透明背景
    handlelength=1.2,     # 缩短图例线条长度
    labelspacing=0.3      # 缩小文字行距
)

# 插图
axins = inset_axes(ax, width=1.8, height=1.6, loc='upper left',
                   bbox_to_anchor=(0.59, 0.60), bbox_transform=ax.transAxes)
axins.plot(alpha_vals_plus, F_plus_vals, color='tab:blue', linewidth=1.5)
axins.axhline(0.99, color='green', linestyle='--', linewidth=1.5)
axins.set_xlim(1.5, 5.0)
axins.set_ylim(0.95, 1)
axins.grid(True, linestyle=':', alpha=0.5)

# ---- (d) η+ ----
ax = axes[1, 1]
ax.plot(alpha_vals_plus, eta_plus_vals, color='tab:orange', linewidth=2, label=r"$\eta_+ = \alpha'_{\rm opt}/\alpha$")
ax.set_xlim(1.5, 5)
ax.set_ylim(1.0, 2.0)
ax.grid(True, linestyle=':', alpha=0.7)
ax.text(0.05, 0.96, '(d)', transform=ax.transAxes, fontsize=20, va='top')
ax.set_xlabel(r'$\alpha$')
ax.set_ylabel(r'$\eta_+$')
ax.legend(loc='upper right', frameon=True)
ax.legend(
    loc='upper right',
    frameon=True,
    fontsize=13,          # 缩小字体
    framealpha=0.9,       # 半透明背景
    handlelength=1.2,     # 缩短图例线条长度
    labelspacing=0.3      # 缩小文字行距
)

plt.tight_layout()
plt.show()